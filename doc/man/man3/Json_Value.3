.TH "Json::Value" 3 "Fri Oct 9 2015" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Json::Value \- 
.PP
Represents a \fCJSON\fP value\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <json\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef std::vector< std::string > \fBMembers\fP"
.br
.ti -1c
.RI "typedef \fBValueIterator\fP \fBiterator\fP"
.br
.ti -1c
.RI "typedef \fBValueConstIterator\fP \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef Json::UInt \fBUInt\fP"
.br
.ti -1c
.RI "typedef Json::Int \fBInt\fP"
.br
.ti -1c
.RI "typedef Json::UInt64 \fBUInt64\fP"
.br
.ti -1c
.RI "typedef Json::Int64 \fBInt64\fP"
.br
.ti -1c
.RI "typedef Json::LargestInt \fBLargestInt\fP"
.br
.ti -1c
.RI "typedef Json::LargestUInt \fBLargestUInt\fP"
.br
.ti -1c
.RI "typedef Json::ArrayIndex \fBArrayIndex\fP"
.br
.ti -1c
.RI "typedef std::map< CZString, \fBValue\fP > \fBObjectValues\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBValue\fP (\fBValueType\fP type=\fBnullValue\fP)"
.br
.RI "\fICreate a default \fBValue\fP of the given type\&. \fP"
.ti -1c
.RI "\fBValue\fP (Int value)"
.br
.ti -1c
.RI "\fBValue\fP (UInt value)"
.br
.ti -1c
.RI "\fBValue\fP (Int64 value)"
.br
.ti -1c
.RI "\fBValue\fP (UInt64 value)"
.br
.ti -1c
.RI "\fBValue\fP (double value)"
.br
.ti -1c
.RI "\fBValue\fP (const char *value)"
.br
.ti -1c
.RI "\fBValue\fP (const char *beginValue, const char *endValue)"
.br
.ti -1c
.RI "\fBValue\fP (const \fBStaticString\fP &value)"
.br
.RI "\fIConstructs a value from a static string\&. \fP"
.ti -1c
.RI "\fBValue\fP (const std::string &value)"
.br
.ti -1c
.RI "\fBValue\fP (bool value)"
.br
.ti -1c
.RI "\fBValue\fP (const \fBValue\fP &other)"
.br
.ti -1c
.RI "\fBValue\fP & \fBoperator=\fP (\fBValue\fP other)"
.br
.ti -1c
.RI "void \fBswap\fP (\fBValue\fP &other)"
.br
.ti -1c
.RI "\fBValueType\fP \fBtype\fP () const "
.br
.ti -1c
.RI "bool \fBoperator<\fP (const \fBValue\fP &other) const "
.br
.ti -1c
.RI "bool \fBoperator<=\fP (const \fBValue\fP &other) const "
.br
.ti -1c
.RI "bool \fBoperator>=\fP (const \fBValue\fP &other) const "
.br
.ti -1c
.RI "bool \fBoperator>\fP (const \fBValue\fP &other) const "
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBValue\fP &other) const "
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBValue\fP &other) const "
.br
.ti -1c
.RI "int \fBcompare\fP (const \fBValue\fP &other) const "
.br
.ti -1c
.RI "const char * \fBasCString\fP () const "
.br
.ti -1c
.RI "std::string \fBasString\fP () const "
.br
.ti -1c
.RI "Int \fBasInt\fP () const "
.br
.ti -1c
.RI "UInt \fBasUInt\fP () const "
.br
.ti -1c
.RI "Int64 \fBasInt64\fP () const "
.br
.ti -1c
.RI "UInt64 \fBasUInt64\fP () const "
.br
.ti -1c
.RI "LargestInt \fBasLargestInt\fP () const "
.br
.ti -1c
.RI "LargestUInt \fBasLargestUInt\fP () const "
.br
.ti -1c
.RI "float \fBasFloat\fP () const "
.br
.ti -1c
.RI "double \fBasDouble\fP () const "
.br
.ti -1c
.RI "bool \fBasBool\fP () const "
.br
.ti -1c
.RI "bool \fBisNull\fP () const "
.br
.ti -1c
.RI "bool \fBisBool\fP () const "
.br
.ti -1c
.RI "bool \fBisInt\fP () const "
.br
.ti -1c
.RI "bool \fBisInt64\fP () const "
.br
.ti -1c
.RI "bool \fBisUInt\fP () const "
.br
.ti -1c
.RI "bool \fBisUInt64\fP () const "
.br
.ti -1c
.RI "bool \fBisIntegral\fP () const "
.br
.ti -1c
.RI "bool \fBisDouble\fP () const "
.br
.ti -1c
.RI "bool \fBisNumeric\fP () const "
.br
.ti -1c
.RI "bool \fBisString\fP () const "
.br
.ti -1c
.RI "bool \fBisArray\fP () const "
.br
.ti -1c
.RI "bool \fBisObject\fP () const "
.br
.ti -1c
.RI "bool \fBisConvertibleTo\fP (\fBValueType\fP other) const "
.br
.ti -1c
.RI "ArrayIndex \fBsize\fP () const "
.br
.RI "\fINumber of values in array or object\&. \fP"
.ti -1c
.RI "bool \fBempty\fP () const "
.br
.RI "\fIReturn true if empty array, empty object, or null; otherwise, false\&. \fP"
.ti -1c
.RI "bool \fBoperator!\fP () const "
.br
.RI "\fIReturn isNull() \fP"
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "void \fBresize\fP (ArrayIndex \fBsize\fP)"
.br
.ti -1c
.RI "\fBValue\fP & \fBoperator[]\fP (ArrayIndex index)"
.br
.ti -1c
.RI "\fBValue\fP & \fBoperator[]\fP (int index)"
.br
.ti -1c
.RI "const \fBValue\fP & \fBoperator[]\fP (ArrayIndex index) const "
.br
.ti -1c
.RI "const \fBValue\fP & \fBoperator[]\fP (int index) const "
.br
.ti -1c
.RI "\fBValue\fP \fBget\fP (ArrayIndex index, const \fBValue\fP &defaultValue) const "
.br
.ti -1c
.RI "bool \fBisValidIndex\fP (ArrayIndex index) const "
.br
.RI "\fIReturn true if index < \fBsize()\fP\&. \fP"
.ti -1c
.RI "\fBValue\fP & \fBappend\fP (const \fBValue\fP &value)"
.br
.RI "\fIAppend value to array at the end\&. \fP"
.ti -1c
.RI "\fBValue\fP & \fBoperator[]\fP (const char *key)"
.br
.RI "\fIAccess an object value by name, create a null member if it does not exist\&. \fP"
.ti -1c
.RI "const \fBValue\fP & \fBoperator[]\fP (const char *key) const "
.br
.ti -1c
.RI "\fBValue\fP & \fBoperator[]\fP (const std::string &key)"
.br
.RI "\fIAccess an object value by name, create a null member if it does not exist\&. \fP"
.ti -1c
.RI "const \fBValue\fP & \fBoperator[]\fP (const std::string &key) const "
.br
.ti -1c
.RI "\fBValue\fP & \fBoperator[]\fP (const \fBStaticString\fP &key)"
.br
.RI "\fIAccess an object value by name, create a null member if it does not exist\&. \fP"
.ti -1c
.RI "\fBValue\fP \fBget\fP (const char *key, const \fBValue\fP &defaultValue) const "
.br
.RI "\fIReturn the member named key if it exist, defaultValue otherwise\&. \fP"
.ti -1c
.RI "\fBValue\fP \fBget\fP (const std::string &key, const \fBValue\fP &defaultValue) const "
.br
.RI "\fIReturn the member named key if it exist, defaultValue otherwise\&. \fP"
.ti -1c
.RI "\fBValue\fP \fBremoveMember\fP (const char *key)"
.br
.RI "\fIRemove and return the named member\&. \fP"
.ti -1c
.RI "\fBValue\fP \fBremoveMember\fP (const std::string &key)"
.br
.RI "\fISame as \fBremoveMember(const char*)\fP \fP"
.ti -1c
.RI "bool \fBisMember\fP (const char *key) const "
.br
.RI "\fIReturn true if the object has a member named key\&. \fP"
.ti -1c
.RI "bool \fBisMember\fP (const std::string &key) const "
.br
.RI "\fIReturn true if the object has a member named key\&. \fP"
.ti -1c
.RI "Members \fBgetMemberNames\fP () const "
.br
.RI "\fIReturn a list of the member names\&. \fP"
.ti -1c
.RI "void \fBsetComment\fP (const char *comment, \fBCommentPlacement\fP placement)"
.br
.RI "\fIComments must be //\&.\&.\&. or /* \&.\&.\&. */\&. \fP"
.ti -1c
.RI "void \fBsetComment\fP (const std::string &comment, \fBCommentPlacement\fP placement)"
.br
.RI "\fIComments must be //\&.\&.\&. or /* \&.\&.\&. */\&. \fP"
.ti -1c
.RI "bool \fBhasComment\fP (\fBCommentPlacement\fP placement) const "
.br
.ti -1c
.RI "std::string \fBgetComment\fP (\fBCommentPlacement\fP placement) const "
.br
.RI "\fIInclude delimiters and embedded newlines\&. \fP"
.ti -1c
.RI "std::string \fBtoStyledString\fP () const "
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBbegin\fP () const "
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBend\fP () const "
.br
.ti -1c
.RI "\fBiterator\fP \fBbegin\fP ()"
.br
.ti -1c
.RI "\fBiterator\fP \fBend\fP ()"
.br
.ti -1c
.RI "void \fBsetOffsetStart\fP (size_t start)"
.br
.ti -1c
.RI "void \fBsetOffsetLimit\fP (size_t limit)"
.br
.ti -1c
.RI "size_t \fBgetOffsetStart\fP () const "
.br
.ti -1c
.RI "size_t \fBgetOffsetLimit\fP () const "
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const \fBValue\fP & \fBnull\fP = reinterpret_cast<const \fBValue\fP&>(kNullRef)"
.br
.ti -1c
.RI "static const LargestInt \fBminLargestInt\fP = LargestInt(~(LargestUInt(-1) / 2))"
.br
.RI "\fIMinimum signed integer value that can be stored in a \fBJson::Value\fP\&. \fP"
.ti -1c
.RI "static const LargestInt \fBmaxLargestInt\fP = LargestInt(LargestUInt(-1) / 2)"
.br
.RI "\fIMaximum signed integer value that can be stored in a \fBJson::Value\fP\&. \fP"
.ti -1c
.RI "static const LargestUInt \fBmaxLargestUInt\fP = LargestUInt(-1)"
.br
.RI "\fIMaximum unsigned integer value that can be stored in a \fBJson::Value\fP\&. \fP"
.ti -1c
.RI "static const Int \fBminInt\fP = Int(~(UInt(-1) / 2))"
.br
.RI "\fIMinimum signed int value that can be stored in a \fBJson::Value\fP\&. \fP"
.ti -1c
.RI "static const Int \fBmaxInt\fP = Int(UInt(-1) / 2)"
.br
.RI "\fIMaximum signed int value that can be stored in a \fBJson::Value\fP\&. \fP"
.ti -1c
.RI "static const UInt \fBmaxUInt\fP = UInt(-1)"
.br
.RI "\fIMaximum unsigned int value that can be stored in a \fBJson::Value\fP\&. \fP"
.ti -1c
.RI "static const Int64 \fBminInt64\fP = Int64(~(UInt64(-1) / 2))"
.br
.RI "\fIMinimum signed 64 bits int value that can be stored in a \fBJson::Value\fP\&. \fP"
.ti -1c
.RI "static const Int64 \fBmaxInt64\fP = Int64(UInt64(-1) / 2)"
.br
.RI "\fIMaximum signed 64 bits int value that can be stored in a \fBJson::Value\fP\&. \fP"
.ti -1c
.RI "static const UInt64 \fBmaxUInt64\fP = UInt64(-1)"
.br
.RI "\fIMaximum unsigned 64 bits int value that can be stored in a \fBJson::Value\fP\&. \fP"
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBValueIteratorBase\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Represents a \fCJSON\fP value\&. 

This class is a discriminated union wrapper that can represents a:
.IP "\(bu" 2
signed integer [range: \fBValue::minInt\fP - \fBValue::maxInt\fP]
.IP "\(bu" 2
unsigned integer (range: 0 - \fBValue::maxUInt\fP)
.IP "\(bu" 2
double
.IP "\(bu" 2
UTF-8 string
.IP "\(bu" 2
boolean
.IP "\(bu" 2
'null'
.IP "\(bu" 2
an ordered list of \fBValue\fP
.IP "\(bu" 2
collection of name/value pairs (javascript object)
.PP
.PP
The type of the held value is represented by a \fBValueType\fP and can be obtained using type()\&.
.PP
values of an \fBobjectValue\fP or \fBarrayValue\fP can be accessed using \fBoperator[]()\fP methods\&. Non const methods will automatically create the a \fBnullValue\fP element if it does not exist\&. The sequence of an \fBarrayValue\fP will be automatically resize and initialized with \fBnullValue\fP\&. \fBresize()\fP can be used to enlarge or truncate an \fBarrayValue\fP\&.
.PP
The \fBget()\fP methods can be used to obtanis default value in the case the required element does not exist\&.
.PP
It is possible to iterate over the list of a \fBobjectValue\fP values using the \fBgetMemberNames()\fP method\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Json::Value::Value (\fBValueType\fPtype = \fC\fBnullValue\fP\fP)"

.PP
Create a default \fBValue\fP of the given type\&. 
.PP
.nf
This is a very useful constructor.
To create an empty array, pass arrayValue.
To create an empty object, pass objectValue.
Another Value can then be set to this one by assignment.

.fi
.PP
 This is useful since \fBclear()\fP and \fBresize()\fP will not alter types\&. 
.PP
.nf
Examples:

.fi
.PP
 
.PP
.nf
Json::Value null_value; // null
Json::Value arr_value(Json::arrayValue); // []
Json::Value obj_value(Json::objectValue); // {}

.fi
.PP
 
.PP
References Json::arrayValue, Json::booleanValue, Json::intValue, Json::nullValue, Json::objectValue, Json::realValue, Json::stringValue, and Json::uintValue\&.
.PP
Referenced by operator[](), and resize()\&.
.SS "Json::Value::Value (const \fBStaticString\fP &value)"

.PP
Constructs a value from a static string\&. Like other value string constructor but do not duplicate the string for internal storage\&. The given string must remain alive after the call to this constructor\&. Example of usage: 
.PP
.nf
* Json::Value aValue( StaticString("some text") );
* 

.fi
.PP
 
.SH "Member Function Documentation"
.PP 
.SS "\fBValue\fP & Json::Value::append (const \fBValue\fP &value)"

.PP
Append value to array at the end\&. Equivalent to jsonvalue[jsonvalue\&.size()] = value; 
.PP
References size()\&.
.SS "void Json::Value::clear ()"
Remove all object members and array elements\&. 
.PP
\fBPrecondition:\fP
.RS 4
type() is arrayValue, objectValue, or nullValue 
.RE
.PP
\fBPostcondition:\fP
.RS 4
type() is unchanged 
.RE
.PP

.PP
References Json::arrayValue, Json::nullValue, and Json::objectValue\&.
.PP
Referenced by resize()\&.
.SS "\fBValue\fP Json::Value::get (ArrayIndexindex, const \fBValue\fP &defaultValue) const"
If the array contains at least index+1 elements, returns the element value, otherwise returns defaultValue\&. 
.SS "Value::Members Json::Value::getMemberNames () const"

.PP
Return a list of the member names\&. If null, return an empty list\&. 
.PP
\fBPrecondition:\fP
.RS 4
type() is objectValue or nullValue 
.RE
.PP
\fBPostcondition:\fP
.RS 4
if type() was nullValue, it remains nullValue 
.RE
.PP

.PP
References Json::nullValue, and Json::objectValue\&.
.SS "\fBValue\fP & Json::Value::operator[] (ArrayIndexindex)"
Access an array element (zero based index )\&. If the array contains less than index element, then null value are inserted in the array so that its size is index+1\&. (You may need to say 'value[0u]' to get your compiler to distinguish this from the operator[] which takes a string\&.) 
.PP
References Json::arrayValue, Json::nullValue, and Value()\&.
.SS "\fBValue\fP & Json::Value::operator[] (intindex)"
Access an array element (zero based index )\&. If the array contains less than index element, then null value are inserted in the array so that its size is index+1\&. (You may need to say 'value[0u]' to get your compiler to distinguish this from the operator[] which takes a string\&.) 
.SS "const \fBValue\fP & Json::Value::operator[] (ArrayIndexindex) const"
Access an array element (zero based index ) (You may need to say 'value[0u]' to get your compiler to distinguish this from the operator[] which takes a string\&.) 
.PP
References Json::arrayValue, and Json::nullValue\&.
.SS "const \fBValue\fP & Json::Value::operator[] (intindex) const"
Access an array element (zero based index ) (You may need to say 'value[0u]' to get your compiler to distinguish this from the operator[] which takes a string\&.) 
.SS "const \fBValue\fP & Json::Value::operator[] (const char *key) const"
Access an object value by name, returns null if there is no member with that name\&. 
.PP
References Json::nullValue, and Json::objectValue\&.
.SS "const \fBValue\fP & Json::Value::operator[] (const std::string &key) const"
Access an object value by name, returns null if there is no member with that name\&. 
.SS "\fBValue\fP & Json::Value::operator[] (const \fBStaticString\fP &key)"

.PP
Access an object value by name, create a null member if it does not exist\&. If the object as no entry for that name, then the member name used to store the new entry is not duplicated\&. Example of use: 
.PP
.nf
* Json::Value object;
* static const StaticString code("code");
* object[code] = 1234;
* 

.fi
.PP
 
.SS "\fBValue\fP Json::Value::removeMember (const char *key)"

.PP
Remove and return the named member\&. Do nothing if it did not exist\&. 
.PP
\fBReturns:\fP
.RS 4
the removed \fBValue\fP, or null\&. 
.RE
.PP
\fBPrecondition:\fP
.RS 4
type() is objectValue or nullValue 
.RE
.PP
\fBPostcondition:\fP
.RS 4
type() is unchanged 
.RE
.PP

.PP
References Json::nullValue, and Json::objectValue\&.
.PP
Referenced by removeMember()\&.
.SS "void Json::Value::resize (ArrayIndexsize)"
Resize the array to size elements\&. New elements are initialized to null\&. May only be called on nullValue or arrayValue\&. 
.PP
\fBPrecondition:\fP
.RS 4
type() is arrayValue or nullValue 
.RE
.PP
\fBPostcondition:\fP
.RS 4
type() is arrayValue 
.RE
.PP

.PP
References Json::arrayValue, clear(), Json::nullValue, size(), and Value()\&.
.SS "void Json::Value::swap (\fBValue\fP &other)"
Swap values\&. 
.PP
\fBNote:\fP
.RS 4
Currently, comments are intentionally not swapped, for both logic and efficiency\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
