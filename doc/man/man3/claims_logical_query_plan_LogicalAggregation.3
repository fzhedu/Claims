.TH "claims::logical_operator::LogicalAggregation" 3 "Fri Oct 9 2015" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
claims::logical_operator::LogicalAggregation \- 
.PP
class description: maintain operator property that results from executing aggregation operator, and generate corresponding physical operator\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <logical_aggregation\&.h>\fP
.PP
Inherits \fBclaims::logical_operator::LogicalOperator\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBAggregationStyle\fP { \fBkAgg\fP, \fBkReparGlobalAgg\fP, \fBkLocalAggReparGlobalAgg\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLogicalAggregation\fP (std::vector< \fBAttribute\fP > group_by_attribute_list, std::vector< \fBAttribute\fP > aggregation_attribute_list, std::vector< BlockStreamAggregationIterator::State::aggregation > aggregation_function_list, \fBLogicalOperator\fP *child)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBPlanContext\fP \fBGetPlanContext\fP ()"
.br
.ti -1c
.RI "\fBBlockStreamIteratorBase\fP * \fBGetPhysicalPlan\fP (const unsigned &block_size)"
.br
.in -1c
.SH "Detailed Description"
.PP 
class description: maintain operator property that results from executing aggregation operator, and generate corresponding physical operator\&. 

as for the implementation of avg() based on sum()/count(), so it's necessary to change the output_schema of private aggregation in kLocalAggReparGlobalAgg aggregation style\&. Note: kReparAndGlobalAgg node isn't implemented\&. 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBclaims::logical_operator::LogicalAggregation::AggregationStyle\fP"
AggregationStyle describe the implementation of aggregation judged from whether the data distribution agrees with the group by attributes or the data is local\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "claims::logical_operator::LogicalAggregation::LogicalAggregation (std::vector< \fBAttribute\fP >group_by_attribute_list, std::vector< \fBAttribute\fP >aggregation_attribute_list, std::vector< BlockStreamAggregationIterator::State::aggregation >aggregation_function_list, \fBLogicalOperator\fP *child)"
This is the default construct method of Aggregation\&. This logical operator creates a new plan context\&. group_by_attribute can be empty if it is scalar aggregation\&. count(*) aggregation can be expressed as 'count' aggregation function along with \fBAttribute(ATTRIBUTE_ANY)\fP 
.SH "Member Function Documentation"
.PP 
.SS "\fBBlockStreamIteratorBase\fP * claims::logical_operator::LogicalAggregation::GetPhysicalPlan (const unsigned &block_size)\fC [protected]\fP, \fC [virtual]\fP"
generate corresponding physical plan tree, mainly set necessary state\&.
.PP
Note: if group_by_attribute_list_ is empty, the partition key is ATTRIBUTE_NULL scalar aggregation allows parallel partitions to be partitioned in any fashion\&. In the current implementation, we use the first aggregation attribute as the partition attribute\&.
.PP
Implements \fBclaims::logical_operator::LogicalOperator\fP\&.
.PP
References claims::logical_operator::LogicalOperator::GetPhysicalPlan(), claims::logical_operator::LogicalOperator::GetPlanContext(), GetPlanContext(), and Config::initial_degree_of_parallelism\&.
.SS "\fBPlanContext\fP claims::logical_operator::LogicalAggregation::GetPlanContext ()\fC [protected]\fP, \fC [virtual]\fP"
get plan context resulting from executing aggregation operator\&. including corresponding attribute_list and property with partition info and communication cost\&. repartition aggregation is currently simplified\&.
.PP
Implements \fBclaims::logical_operator::LogicalOperator\fP\&.
.PP
References claims::logical_operator::PlanContext::GetAggregatedDatasize(), and claims::logical_operator::LogicalOperator::GetPlanContext()\&.
.PP
Referenced by GetPhysicalPlan()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
